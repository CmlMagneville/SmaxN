[{"path":"https://cmlmagneville.github.io/SmaxN/articles/How_to_compute_SmaxN.html","id":"what-is-the-smaxn-metric-about","dir":"Articles","previous_headings":"","what":"What is the SmaxN metric about?","title":"How to compute the SmaxN metric?","text":"SmaxN metric uses network synchronised cameras estimate species abundance using distances cameras species maximal speed. relies simple principle mobile individual can two places time.  SmaxN framework needs conditions: network temporally synchronised cameras: Surveys based set least two fixed cameras field view overlap. temporal synchronisation realised coherent precision according study design (precision individuals counted distance separate cameras). Basically, just need able link frames one camera frames cameras. distances pair cameras must known must build distance data frame cameras rows columns. abundance time: abundance studied species retrieved time. Thus studied species, matrix recorded abundance time step (rows) camera (columns) called camera × time abundance data frame. species maximal speed: species maximal speed retrieved experiments using data available. Yet knowledge, speed data available small number species Husak et al. 2006 (collared lizard Crotaphytus collaris), Alexander et al. 1977 (ten species african ungulates), Layne Benton 1954 (fourteen species small mammals), Hirt et al. 2017 (474 terrestrial species), Fulton 2007 (117 coral reef fish species belonging 10 families). data missing, recommend use conservative estimates maximum maximal speed among species clade (e.g. family order)  NB: species maximal speed distances cameras must given using metric units (.e. using meters distance, use meters per seconds (instance) speed)  Using minimal time takes individual studied species go one camera another camera (using species maximal speed distance cameras), SmaxN algorithm find best combination abundances seen across time cameras get highest possible estimate abundance.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/articles/How_to_compute_SmaxN.html","id":"lets-compute-the-smaxn-other-abundance-estimates","dir":"Articles","previous_headings":"","what":"Let’s compute the SmaxN & other abundance estimates","title":"How to compute the SmaxN metric?","text":"work simple example. First, let’s build distance data frame abundance data: distance dataframe instance 2m camera camera B, 5m camera camera C D etc.  instance, individual seen camera first timestep, one individual seen camera second timestep, three individuals seen camera third time step etc.  can now call package apply SmaxN.computation function compute SmaxN metric among metrics:  Let’s now look results: maxN value highest abundance seen amon cameras time steps: SmaxN value: can see using SmaxN metric, abundance estmation doubled using maxN metric values abundances along cameras time steps led SmaxN metric: number combinaisons time steps cameras led SmaxN value: SmaxN_timestep maximal value sum abundances across cameras time step: metrix equals 16 obtained ninth time step (6 + 1 + 3 + 6): maximal values obtained camera across time steps: maximal values obtained time step across cameras:  explanations, see paper associated framework: https://aslopubs.onlinelibrary.wiley.com/doi/full/10.1002/lom3.10606","code":"# Build distance dataframe for the example: dist_df_ex <- data.frame(\"A\" = c(0, 2, 5, 5), \"B\" = c(2, 0, 5, 5),                           \"C\" = c(5, 5, 0, 4), \"D\" = c(5, 5, 4, 0)) rownames(dist_df_ex) <- c(\"A\", \"B\", \"C\", \"D\")  # Build distance dataframe for the example: abund_df_ex <- data.frame(\"A\" = c(0, 1, 3, 7, 2, 2, 3, 0, 6, 2, 0, 1),                            \"B\" = c(2, 2, 2, 2, 0, 0, 0, 0, 1, 2, 1, 0),                            \"C\" = c(2, 0, 1, 0, 0, 4, 2, 2, 3, 0, 0, 4),                            \"D\" = c(0, 1, 0, 1, 0, 6, 1, 1, 6, 4, 2, 1)) dist_df_ex ##   A B C D ## A 0 2 5 5 ## B 2 0 5 5 ## C 5 5 0 4 ## D 5 5 4 0 abund_df_ex ##    A B C D ## 1  0 2 2 0 ## 2  1 2 0 1 ## 3  3 2 1 0 ## 4  7 2 0 1 ## 5  2 0 0 0 ## 6  2 0 4 6 ## 7  3 0 2 1 ## 8  0 0 2 1 ## 9  6 1 3 6 ## 10 2 2 0 4 ## 11 0 1 0 2 ## 12 1 0 4 1 SmaxN_results <- SmaxN::SmaxN.computation(abund_df = abund_df_ex,                                            speed = 1.6,                                            dist_df = dist_df_ex) ## [1] \"!!!!!! Starting row  1 on 2\" ## [1] \"50%\" SmaxN_results$maxN ## [1] 7 SmaxN_results$SmaxN ## [1] 19 SmaxN_results$path_saved ## [[1]] ## [[1]][[1]] ##   value cam_nm timestep ## 1     7      A        4 ## 2     2      B        4 ## 3     4      C        6 ## 4     6      D        6 SmaxN_results$number_SmaxN_path ## [1] 1 SmaxN_results$SmaxN_timestep ## [1] 16 SmaxN_results$maxN_cam ## A B C D  ## 7 2 4 6 SmaxN_results$maxN_timestep ##  1  2  3  4  5  6  7  8  9 10 11 12  ##  2  2  3  7  2  6  3  2  6  4  2  4"},{"path":"https://cmlmagneville.github.io/SmaxN/articles/How_to_compute_SmaxN.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"How to compute the SmaxN metric?","text":"Alexander et al. (1977) Fast locomotion African ungulates Journal Zoology, 183, 291-300. Fulton (2007) Swimming speed performance coral reef fishes: field validations reveal distinct functional groups Coral Reefs, 26, 217-228. Hirt et al. (2017) general scaling law reveals largest animals fastest Nat. Ecol. Evol. 1, 1116–1122. Husak et al. (2006) Faster lizards sire offspring: sexual selection whole-animal performance Evolution 60, 2122–2130. Layne & Benton (1954) Speeds Small Mammals Journal Mammology 1, 103–104.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Magneville. Author, maintainer.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magneville C (2024). SmaxN: Compute synchronised maxN using temporally synchronised cameras. R package version 0.2, https://cmlmagneville.github.io/SmaxN/.","code":"@Manual{,   title = {SmaxN: Compute synchronised maxN when using temporally synchronised cameras},   author = {Camille Magneville},   year = {2024},   note = {R package version 0.2},   url = {https://cmlmagneville.github.io/SmaxN/}, }"},{"path":"https://cmlmagneville.github.io/SmaxN/index.html","id":"smaxn","dir":"","previous_headings":"","what":"Compute synchronised maxN when using temporally synchronised cameras","title":"Compute synchronised maxN when using temporally synchronised cameras","text":"SmaxN package provides unique function compute maximisation abundances index. notably helps compute Synchronised maxN (SmaxN) based use temporally synchronised cameras.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compute synchronised maxN when using temporally synchronised cameras","text":"can install SmaxN package GitHub : compute SmaxN associated metrics, users need: data frame gathering abundances values time (rows) cameras (columns) studied species data frame gathering distance camera pairs maximal speed studied species - established laboratory experiments, based field performance video measurements stereo cameras used","code":"## Install < remotes > package (if not already installed) ---- if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  ## Install < SmaxN > package from GitHub ---- remotes::install_github(\"CmlMagneville/SmaxN\", build_vignettes = TRUE)"},{"path":"https://cmlmagneville.github.io/SmaxN/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Compute synchronised maxN when using temporally synchronised cameras","text":"Please cite package : Magneville C., Brissaud C., Fleure V., Loiseau N., Claverie T., Villeger S. (2024). new framework estimating abundance animals using network cameras Limnology Oceanography - Methods https://aslopubs.onlinelibrary.wiley.com/doi/full/10.1002/lom3.10606","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Compute synchronised maxN when using temporally synchronised cameras","text":"SV, TC, NL, VF CM developed conceptual thinking SmaxN algorithm. SV CM developed package architecture CM coded functions. CB, SV CM tested functions. SV CM contributed writing helps tutorials.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/cam.order.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the camera order — cam.order","title":"Compute the camera order — cam.order","text":"function rated cameras following order: first camera central one (lowest mean distance across camera) (several camera possible, classify order come abund_df,  important test possible paths). cameras  rated according minimal distances camers already chosen.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/cam.order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the camera order — cam.order","text":"","code":"cam.order(time_df)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/cam.order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the camera order — cam.order","text":"time_df numerical dataframe containing minimal time  needed individual studied species go camera  another camera.many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. dataframe output  compute.cam.time function.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/cam.order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the camera order — cam.order","text":"dataframe one row containing camera order follow","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/cam.order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the camera order — cam.order","text":"","code":"time_df <- data.frame(\"A\" = c(0,1,3,3), \"B\" = c(1,0,2,2),                        \"C\" = c(3,3,0,2), \"D\" = c(3,2,2,0)) rownames(time_df) <- c(\"A\", \"B\", \"C\", \"D\")  order_cam <- cam.order(time_df)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/compute.cam.time.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute frames on which SmaxN has to be computed — compute.cam.time","title":"Compute frames on which SmaxN has to be computed — compute.cam.time","text":"function computes dataframe containing minimal time  needed individual studied species go camera  another camera. based distance pair cameras  swim speed species.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/compute.cam.time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute frames on which SmaxN has to be computed — compute.cam.time","text":"","code":"compute.cam.time(dist_df, fish_speed)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/compute.cam.time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute frames on which SmaxN has to be computed — compute.cam.time","text":"dist_df numerical dataframe containing distance  pair camera. many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. Rows names columns names must cameras names. fish_speed numerical value refering maximal speed  studied species. Speed must given meters per second.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/compute.cam.time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute frames on which SmaxN has to be computed — compute.cam.time","text":"function returns dataframe containing minimal time   needed individual studied species go camera   another camera.many rows cameras  many columns cameras, thus dataframe symmetrical  diagonal filled 0.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/compute.cam.time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute frames on which SmaxN has to be computed — compute.cam.time","text":"","code":"# Build distance dataframe for the example:  dist_df_ex <- data.frame(\"A\" = c(0, 2, 5, 5), \"B\" = c(2, 0, 5, 5),   \"C\" = c(5, 5, 0, 4), \"D\" = c(5, 5, 4, 0))  rownames(dist_df_ex) <- c(\"A\", \"B\", \"C\", \"D\")    # Run the function:  compute.cam.time(dist_df = dist_df_ex, fish_speed = 1.6) #>   A B C D #> A 0 1 3 3 #> B 1 0 3 3 #> C 3 3 0 2 #> D 3 3 2 0"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/first.cam.possible.html","id":null,"dir":"Reference","previous_headings":"","what":"Tell if possible cells for the first cameras are possibly leading to the \r\nSmaxN or if they are not. — first.cam.possible","title":"Tell if possible cells for the first cameras are possibly leading to the \r\nSmaxN or if they are not. — first.cam.possible","text":"function completes first_cell_df contains cells given value first camera adding TRUE FALSE  given cell can lead SmaxN lead SmaxN comparing maximal SmaxN computed small UI.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/first.cam.possible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tell if possible cells for the first cameras are possibly leading to the \r\nSmaxN or if they are not. — first.cam.possible","text":"","code":"first.cam.possible(time_df, first_cell_df, SmaxN_small_UI, bloc)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/first.cam.possible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tell if possible cells for the first cameras are possibly leading to the \r\nSmaxN or if they are not. — first.cam.possible","text":"time_df numerical dataframe containing minimal time  needed individual studied species go camera  another camera.many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. dataframe output  compute.cam.time function. first_cell_df dataframe value, cam_nm timesteps  possible cells first camera SmaxN_small_UI numeric value referring maximal value  SmaxN small UI bloc studied big UI","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/first.cam.possible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tell if possible cells for the first cameras are possibly leading to the \r\nSmaxN or if they are not. — first.cam.possible","text":"completed first_cell_df","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/first.cam.possible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tell if possible cells for the first cameras are possibly leading to the \r\nSmaxN or if they are not. — first.cam.possible","text":"","code":"abund_df <- data.frame(\"A\" = c(9,8,3,3,3,3,3),   \"B\" = c(0,4,2,2,1,3,3),   \"C\" = c(0,0,0,0,1,1,1),   \"D\" = c(1,0,0,0,3,3,3))    time_df <- data.frame(\"A\" = c(0,5,6,6), \"B\" = c(5,0,3,3),   \"C\" = c(6,3, 0, 3), \"D\" = c(6,3,3,0))  rownames(time_df) <- c(\"A\", \"B\", \"C\", \"D\")"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/frame.possible.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the frame of possible cells — frame.possible","title":"Compute the frame of possible cells — frame.possible","text":"function computes given timestep, frame possible cells: cells path can computed. Practically function adds NA cells frame possibles abund_df.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/frame.possible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the frame of possible cells — frame.possible","text":"","code":"frame.possible(T, time_df, abund_df)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/frame.possible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the frame of possible cells — frame.possible","text":"T numerical value referring number row  abundance dataframe studied (timestep) time_df numerical dataframe containing minimal time  needed individual studied species go camera  another camera.many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. dataframe output  compute.cam.time function. abund_df numerical dataframe containing abundance  given species across continuous time several cameras. columns refer cameras rows refers time. Time must given seconds continuous. CAREFUL cameras  order abund_df time_df!.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/frame.possible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the frame of possible cells — frame.possible","text":"abundance dataframe NA cells except frame  possible around studied timestep T.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/frame.possible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the frame of possible cells — frame.possible","text":"","code":"abund_df <- data.frame(\"A\" = c(9,8,3,3,3,3,3), \"B\" = c(0,4,2,2,1,3,3),  \"C\" = c(0,0,0,0,1,1,1), \"D\" = c(1,0,0,0,3,3,3))  time_df <- data.frame(\"A\" = c(0,4,4,3), \"B\" = c(4,0,2,2),                        \"C\" = c(4,2,0,2), \"D\" = c(3,2,2,0)) rownames(time_df) <- c(\"A\", \"B\", \"C\", \"D\")  cam_order <- cam.order(time_df)  abund_df <- abund_df[, as.vector(unlist(cam_order))]"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/next.possible.html","id":null,"dir":"Reference","previous_headings":"","what":"Tell if the next value is possible or not given time between cameras — next.possible","title":"Tell if the next value is possible or not given time between cameras — next.possible","text":"function TRUE/FALSE value next value possible. ex-aequo values, begin first one next_possible  dataframe, use works.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/next.possible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tell if the next value is possible or not given time between cameras — next.possible","text":"","code":"next.possible(max_bloc, next_possible, time_df)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/next.possible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tell if the next value is possible or not given time between cameras — next.possible","text":"max_bloc dataframe containing rows number already chosen path coordinates ie. column (camera name) row  (time) . Values ranged fom biggest (first rows)  lowest (last rows). Column names: value, cam_nm, timestep next_possible dataframe column names: value, cam_nm, timestep  row information next possible value. several cells  value (ex-aequo), dataframe one row cell. dataframe obtained search.next.value function. time_df numerical dataframe containing minimal time  needed individual studied species go camera  another camera.many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. dataframe output  compute.cam.time function.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/next.possible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tell if the next value is possible or not given time between cameras — next.possible","text":"next value chosen say biggest value bloc last value max_bloc possible according  distance cameras. Note: one possible value, check possible already path values stop one possible. function tests possible values (ex-aequo) df  showing TRUE FALSE ex-aequo given values already path.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/pseudoSmaxN.timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the max of cameras for a given second and a given span — pseudoSmaxN.timestep","title":"Compute the max of cameras for a given second and a given span — pseudoSmaxN.timestep","text":"function computes maximal value abundance given second  \"n\" seconds . \"n\" set \"value\" parameter .","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/pseudoSmaxN.timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the max of cameras for a given second and a given span — pseudoSmaxN.timestep","text":"","code":"pseudoSmaxN.timestep(time_df, abund_df, timestep, value)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/pseudoSmaxN.timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the max of cameras for a given second and a given span — pseudoSmaxN.timestep","text":"time_df numerical dataframe containing minimal time  needed individual studied species go camera  another camera.many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. dataframe output  compute.cam.time function abund_df numerical dataframe containing abundance  given species across continuous time several cameras. columns refer cameras rows refers time. Time must given seconds continuous. CAREFUL cameras  order abund_df time_df!. timestep number row studied timestep value value span interval SmaxN  computed. Note: span 2 seconds, interval gathers  3 cases `abund_df`.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/pseudoSmaxN.timestep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the max of cameras for a given second and a given span — pseudoSmaxN.timestep","text":"function returns SmaxN value given timestep span","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/pseudoSmaxN.timestep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the max of cameras for a given second and a given span — pseudoSmaxN.timestep","text":"","code":"# Build distance dataframe for the example:  abund_df_ex <- data.frame(\"A\" = c(0, 1, 3, 7, 2, 2, 3),                             \"B\" = c(2, 2, 2, 2, 0, 0, 0),                             \"C\" = c(2, 0, 1, 0, 0, 4, 2),                             \"D\" = c(0, 1, 0, 1, 0, 6, 1))    # Run the function:"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/recursive.paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the biggest SmaxN for all the possible path of a given timestep — recursive.paths","title":"Compute the biggest SmaxN for all the possible path of a given timestep — recursive.paths","text":"function computes paths beggining given timestep first camera return highest SmaxN found path.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/recursive.paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the biggest SmaxN for all the possible path of a given timestep — recursive.paths","text":"","code":"recursive.paths(T, frame_possible_df, n, path_df, SmaxN_small_UI, time_df)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/recursive.paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the biggest SmaxN for all the possible path of a given timestep — recursive.paths","text":"T numerical value referring number row  abundance dataframe studied (timestep) frame_possible_df dataframe represents frame possible studied timestep. Computed using frame.possible function. n numerical value refering studied camera function searches new values path_df dataframe value/camera_name/timestep information  cells already path SmaxN_small_UI numeric value refering highest pseudo SmaxN found lowest intervals. time_df numerical dataframe containing minimal time  needed individual studied species go camera  another camera.many rows cameras many columns cameras, thus dataframe symmetrical diagonal filled 0. dataframe output  compute.cam.time function","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/recursive.paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the biggest SmaxN for all the possible path of a given timestep — recursive.paths","text":"highest SmaxN value found possble path given  studied timestep frame possible.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/recursive.paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the biggest SmaxN for all the possible path of a given timestep — recursive.paths","text":"","code":"abund_df <- data.frame(\"A\" = c(3,8,3,3,3,3,3), \"B\" = c(0,4,2,2,1,8,3),  \"C\" = c(0,0,0,9,1,1,1), \"D\" = c(1,0,0,0,3,3,3))  time_df <- data.frame(\"A\" = c(0,4,4,3), \"B\" = c(4,0,2,2),                        \"C\" = c(4,2,0,2), \"D\" = c(3,2,2,0)) rownames(time_df) <- c(\"A\", \"B\", \"C\", \"D\")  cam_order <- cam.order(time_df)  abund_df <- abund_df[, as.vector(unlist(cam_order))]"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SmaxN: Compute synchronised maxN when using temporally synchronised cameras — SmaxN-package","title":"SmaxN: Compute synchronised maxN when using temporally synchronised cameras — SmaxN-package","text":"purpose `SmaxN` package compute estimation species abundance given network synchronised cameras.","code":""},{"path":[]},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SmaxN: Compute synchronised maxN when using temporally synchronised cameras — SmaxN-package","text":"Maintainer: Camille Magneville camille.magneville@gmail.com (ORCID)","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN.computation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Synchronised MaxN (SmaxN) (highest value) — SmaxN.computation","title":"Compute the Synchronised MaxN (SmaxN) (highest value) — SmaxN.computation","text":"function computes Synchronised MaxN (SmaxN) set n cameras know distances given species maximal speed known.","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN.computation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Synchronised MaxN (SmaxN) (highest value) — SmaxN.computation","text":"","code":"SmaxN.computation(abund_df, speed, dist_df)"},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN.computation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Synchronised MaxN (SmaxN) (highest value) — SmaxN.computation","text":"abund_df numerical dataframe containing abundance  given species across continuous time several cameras. columns refer cameras rows refers time. Time must given seconds continuous. CAREFUL cameras  order abund_df time_df!. speed numerical value refering maximal speed  studied species. Speed must given meters per second. computation maxN values take account speed (say camera pooling done second level),  fish_speed = NULL dist_df numerical dataframe containing distance   pair camera. many rows cameras  many columns cameras, thus dataframe symmetrical  diagonal filled 0. Rows names columns names  must cameras names. CAREFUL cameras  order dist_df abund_df!","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN.computation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Synchronised MaxN (SmaxN) (highest value) — SmaxN.computation","text":"one camera: fish speed taken account,  function returns list:  Synchronised maxN (SmaxN) value (maximal value computed  gathering temporally synchronised cameras) , maxN value (maximal value computed maximal abundance across cameras  timesteps) , maxN_cam values (vector maximal values  camera, thus list contains many elements cameras) ,  maxN_tiemstep values (vector maximal values row taking maximal value cameras abundances row, thus list  contains many elements rows abund_df dataframe)  SmaxN_timestep value (maximal value abundances summed across cameras row). fish speed taken account ,  returned list contain SmaxN value SmaxN  value equal SmaxN_row value. one camera: function returns maxN value (maximal value computed maximal abundance across timesteps)","code":""},{"path":"https://cmlmagneville.github.io/SmaxN/reference/SmaxN.computation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Synchronised MaxN (SmaxN) (highest value) — SmaxN.computation","text":"","code":"# Build distance dataframe for the example:  dist_df_ex <- data.frame(\"A\" = c(0, 2, 5, 5), \"B\" = c(2, 0, 5, 5),   \"C\" = c(5, 5, 0, 4), \"D\" = c(5, 5, 4, 0))  rownames(dist_df_ex) <- c(\"A\", \"B\", \"C\", \"D\")  # Build distance dataframe for the example:  abund_df_ex <- data.frame(\"A\" = c(0, 1, 3, 7, 2, 2, 3, 0, 6, 2, 0, 1),                             \"B\" = c(2, 2, 2, 2, 0, 0, 0, 0, 8, 2, 1, 0),                             \"C\" = c(2, 0, 1, 0, 0, 4, 2, 2, 3, 0, 0, 4),                             \"D\" = c(0, 1, 0, 1, 0, 6, 1, 1, 6, 4, 2, 1))"}]
