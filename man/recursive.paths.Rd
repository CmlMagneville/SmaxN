% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/3_Intermediate_functions.R
\name{recursive.paths}
\alias{recursive.paths}
\title{Compute the biggest SmaxN for all the possible path of a given timestep}
\usage{
recursive.paths(T, frame_possible_df, n, path_df, SmaxN_small_UI, time_df)
}
\arguments{
\item{T}{a numerical value referring to the number of the row of the 
abundance dataframe studied (timestep)}

\item{frame_possible_df}{a dataframe which represents the frame of possible for
the studied timestep. Computed using the \code{frame.possible} function.}

\item{n}{a numerical value refering to the studied camera on which the
function searches new values}

\item{path_df}{a dataframe with value/camera_name/timestep information of 
cells already on the path}

\item{SmaxN_small_UI}{a numeric value refering to the highest pseudo SmaxN
found on the lowest intervals.}

\item{time_df}{a numerical dataframe containing the minimal time 
needed for an individual of the studied species to go from a camera to 
another camera.There are as many rows as there are cameras and there are
as many columns as there are cameras, thus the dataframe is symmetrical
and the diagonal is filled with 0. This dataframe is the output of the 
\code{compute.cam.time} function}
}
\value{
the highest SmaxN value found on all the possble path given the 
studied timestep and the frame of possible.
}
\description{
This function computes all the paths beggining with a given timestep of the
first camera and return the highest SmaxN found on those path.
}
\examples{

abund_df <- data.frame("A" = c(3,8,3,3,3,3,3), "B" = c(0,4,2,2,1,8,3), 
"C" = c(0,0,0,9,1,1,1), "D" = c(1,0,0,0,3,3,3))

time_df <- data.frame("A" = c(0,4,4,3), "B" = c(4,0,2,2), 
                      "C" = c(4,2,0,2), "D" = c(3,2,2,0))
rownames(time_df) <- c("A", "B", "C", "D")

cam_order <- cam.order(time_df)

abund_df <- abund_df[, as.vector(unlist(cam_order))]


}
